/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Fri Jan 15 11:14:04 CET 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestsMainTest.h"


/* String declarations */
static std::string const __str_literal_1("Hello World from the testbench.", 31u);


/* Constructor */
MOD_mkTestsMainTest::MOD_mkTestsMainTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_testFSM_abort(simHdl, "testFSM_abort", this, 1u, (tUInt8)0u),
    INST_testFSM_fired(simHdl, "testFSM_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testFSM_fired_1(simHdl, "testFSM_fired_1", this, 1u, (tUInt8)0u),
    INST_testFSM_start_reg(simHdl, "testFSM_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testFSM_start_reg_1(simHdl, "testFSM_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testFSM_start_reg_2(simHdl, "testFSM_start_reg_2", this, 1u, (tUInt8)0u),
    INST_testFSM_start_wire(simHdl, "testFSM_start_wire", this, 1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 15u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestsMainTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_testFSM_action_l13c17", SYM_RULE);
  init_symbol(&symbols[1u], "RL_testFSM_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[2u], "RL_testFSM_fsm_start", SYM_RULE);
  init_symbol(&symbols[3u], "RL_testFSM_restart", SYM_RULE);
  init_symbol(&symbols[4u], "RL_testFSM_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[5u], "testFSM_abort", SYM_MODULE, &INST_testFSM_abort);
  init_symbol(&symbols[6u], "testFSM_fired", SYM_MODULE, &INST_testFSM_fired);
  init_symbol(&symbols[7u], "testFSM_fired_1", SYM_MODULE, &INST_testFSM_fired_1);
  init_symbol(&symbols[8u], "testFSM_fired__h595", SYM_DEF, &DEF_testFSM_fired__h595, 1u);
  init_symbol(&symbols[9u], "testFSM_start_reg", SYM_MODULE, &INST_testFSM_start_reg);
  init_symbol(&symbols[10u], "testFSM_start_reg_1", SYM_MODULE, &INST_testFSM_start_reg_1);
  init_symbol(&symbols[11u],
	      "testFSM_start_reg_1__h593",
	      SYM_DEF,
	      &DEF_testFSM_start_reg_1__h593,
	      1u);
  init_symbol(&symbols[12u], "testFSM_start_reg_2", SYM_MODULE, &INST_testFSM_start_reg_2);
  init_symbol(&symbols[13u], "testFSM_start_reg__h737", SYM_DEF, &DEF_testFSM_start_reg__h737, 1u);
  init_symbol(&symbols[14u], "testFSM_start_wire", SYM_MODULE, &INST_testFSM_start_wire);
}


/* Rule actions */

void MOD_mkTestsMainTest::RL_testFSM_start_reg__dreg_update()
{
  tUInt8 DEF_testFSM_start_reg_2_whas_AND_testFSM_start_reg_ETC___d3;
  DEF_testFSM_start_reg_2_whas_AND_testFSM_start_reg_ETC___d3 = INST_testFSM_start_reg_2.METH_whas() && INST_testFSM_start_reg_2.METH_wget();
  INST_testFSM_start_reg_1.METH_write(DEF_testFSM_start_reg_2_whas_AND_testFSM_start_reg_ETC___d3);
}

void MOD_mkTestsMainTest::RL_testFSM_fired__dreg_update()
{
  tUInt8 DEF_testFSM_fired_1_whas_AND_testFSM_fired_1_wget___d6;
  DEF_testFSM_fired_1_whas_AND_testFSM_fired_1_wget___d6 = INST_testFSM_fired_1.METH_whas() && INST_testFSM_fired_1.METH_wget();
  INST_testFSM_fired.METH_write(DEF_testFSM_fired_1_whas_AND_testFSM_fired_1_wget___d6);
}

void MOD_mkTestsMainTest::RL_testFSM_restart()
{
  INST_testFSM_start_wire.METH_wset((tUInt8)1u);
  INST_testFSM_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTestsMainTest::RL_testFSM_action_l13c17()
{
  INST_testFSM_fired_1.METH_wset((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTestsMainTest::RL_testFSM_fsm_start()
{
  INST_testFSM_start_wire.METH_wset((tUInt8)1u);
  INST_testFSM_start_reg_2.METH_wset((tUInt8)1u);
  INST_testFSM_start_reg.METH_write((tUInt8)0u);
}


/* Methods */

void MOD_mkTestsMainTest::METH_go()
{
  INST_testFSM_start_reg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkTestsMainTest::METH_RDY_go()
{
  tUInt8 DEF_CAN_FIRE_go;
  tUInt8 PORT_RDY_go;
  DEF_testFSM_fired__h595 = INST_testFSM_fired.METH_read();
  DEF_testFSM_start_reg_1__h593 = INST_testFSM_start_reg_1.METH_read();
  DEF_testFSM_start_reg__h737 = INST_testFSM_start_reg.METH_read();
  DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 = !DEF_testFSM_start_reg_1__h593 || DEF_testFSM_fired__h595;
  DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 && !DEF_testFSM_start_reg__h737;
  DEF_CAN_FIRE_go = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25;
  PORT_RDY_go = DEF_CAN_FIRE_go;
  return PORT_RDY_go;
}

tUInt8 MOD_mkTestsMainTest::METH_done()
{
  tUInt8 PORT_done;
  DEF_testFSM_fired__h595 = INST_testFSM_fired.METH_read();
  DEF_testFSM_start_reg_1__h593 = INST_testFSM_start_reg_1.METH_read();
  DEF_testFSM_start_reg__h737 = INST_testFSM_start_reg.METH_read();
  DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 = !DEF_testFSM_start_reg_1__h593 || DEF_testFSM_fired__h595;
  DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 && !DEF_testFSM_start_reg__h737;
  PORT_done = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25;
  return PORT_done;
}

tUInt8 MOD_mkTestsMainTest::METH_RDY_done()
{
  tUInt8 DEF_CAN_FIRE_done;
  tUInt8 PORT_RDY_done;
  DEF_CAN_FIRE_done = (tUInt8)1u;
  PORT_RDY_done = DEF_CAN_FIRE_done;
  return PORT_RDY_done;
}


/* Reset routines */

void MOD_mkTestsMainTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_testFSM_start_reg_1.reset_RST(ARG_rst_in);
  INST_testFSM_start_reg.reset_RST(ARG_rst_in);
  INST_testFSM_fired.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestsMainTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestsMainTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_testFSM_abort.dump_state(indent + 2u);
  INST_testFSM_fired.dump_state(indent + 2u);
  INST_testFSM_fired_1.dump_state(indent + 2u);
  INST_testFSM_start_reg.dump_state(indent + 2u);
  INST_testFSM_start_reg_1.dump_state(indent + 2u);
  INST_testFSM_start_reg_2.dump_state(indent + 2u);
  INST_testFSM_start_wire.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestsMainTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 13u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFSM_fired__h595", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFSM_start_reg_1__h593", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFSM_start_reg__h737", 1u);
  num = INST_testFSM_abort.dump_VCD_defs(num);
  num = INST_testFSM_fired.dump_VCD_defs(num);
  num = INST_testFSM_fired_1.dump_VCD_defs(num);
  num = INST_testFSM_start_reg.dump_VCD_defs(num);
  num = INST_testFSM_start_reg_1.dump_VCD_defs(num);
  num = INST_testFSM_start_reg_2.dump_VCD_defs(num);
  num = INST_testFSM_start_wire.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestsMainTest::dump_VCD(tVCDDumpType dt,
				   unsigned int levels,
				   MOD_mkTestsMainTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestsMainTest::vcd_defs(tVCDDumpType dt, MOD_mkTestsMainTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25) != DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25, 1u);
	backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25;
      }
      ++num;
      if ((backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21) != DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21, 1u);
	backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_testFSM_fired__h595) != DEF_testFSM_fired__h595)
      {
	vcd_write_val(sim_hdl, num, DEF_testFSM_fired__h595, 1u);
	backing.DEF_testFSM_fired__h595 = DEF_testFSM_fired__h595;
      }
      ++num;
      if ((backing.DEF_testFSM_start_reg_1__h593) != DEF_testFSM_start_reg_1__h593)
      {
	vcd_write_val(sim_hdl, num, DEF_testFSM_start_reg_1__h593, 1u);
	backing.DEF_testFSM_start_reg_1__h593 = DEF_testFSM_start_reg_1__h593;
      }
      ++num;
      if ((backing.DEF_testFSM_start_reg__h737) != DEF_testFSM_start_reg__h737)
      {
	vcd_write_val(sim_hdl, num, DEF_testFSM_start_reg__h737, 1u);
	backing.DEF_testFSM_start_reg__h737 = DEF_testFSM_start_reg__h737;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25, 1u);
      backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired_1_A_ETC___d25;
      vcd_write_val(sim_hdl, num++, DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21, 1u);
      backing.DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21 = DEF_NOT_testFSM_start_reg_1_0_OR_testFSM_fired___d21;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_testFSM_fired__h595, 1u);
      backing.DEF_testFSM_fired__h595 = DEF_testFSM_fired__h595;
      vcd_write_val(sim_hdl, num++, DEF_testFSM_start_reg_1__h593, 1u);
      backing.DEF_testFSM_start_reg_1__h593 = DEF_testFSM_start_reg_1__h593;
      vcd_write_val(sim_hdl, num++, DEF_testFSM_start_reg__h737, 1u);
      backing.DEF_testFSM_start_reg__h737 = DEF_testFSM_start_reg__h737;
    }
}

void MOD_mkTestsMainTest::vcd_prims(tVCDDumpType dt, MOD_mkTestsMainTest &backing)
{
  INST_testFSM_abort.dump_VCD(dt, backing.INST_testFSM_abort);
  INST_testFSM_fired.dump_VCD(dt, backing.INST_testFSM_fired);
  INST_testFSM_fired_1.dump_VCD(dt, backing.INST_testFSM_fired_1);
  INST_testFSM_start_reg.dump_VCD(dt, backing.INST_testFSM_start_reg);
  INST_testFSM_start_reg_1.dump_VCD(dt, backing.INST_testFSM_start_reg_1);
  INST_testFSM_start_reg_2.dump_VCD(dt, backing.INST_testFSM_start_reg_2);
  INST_testFSM_start_wire.dump_VCD(dt, backing.INST_testFSM_start_wire);
}
