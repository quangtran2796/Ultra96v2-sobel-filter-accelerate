/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Sat Jan 16 10:45:28 CET 2021
 * 
 */

/* Generation options: */
#ifndef __mkAXIConverter_h__
#define __mkAXIConverter_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkAXIConverter module */
class MOD_mkAXIConverter : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt64> INST_address_image_1;
  MOD_Reg<tUInt64> INST_address_image_2;
  MOD_Fifo<tUInt64> INST_buffer;
  MOD_Reg<tUInt64> INST_conversion_finished;
  MOD_Reg<tUInt8> INST_converting_flag;
  MOD_Reg<tUInt64> INST_ddr_read_count;
  MOD_Reg<tUInt64> INST_ddr_write_count;
  MOD_Reg<tUInt32> INST_gray_data;
  MOD_Reg<tUInt64> INST_image_size;
  MOD_Wire<tUInt64> INST_master_read_araddrOut;
  MOD_Wire<tUInt8> INST_master_read_arprotOut;
  MOD_Wire<tUInt8> INST_master_read_arreadyIn;
  MOD_Fifo<tUWide> INST_master_read_in;
  MOD_Reg<tUInt8> INST_master_read_isRst_isInReset;
  MOD_Fifo<tUWide> INST_master_read_out;
  MOD_Wire<tUInt64> INST_master_read_rdataIn;
  MOD_Wire<tUInt8> INST_master_read_rrespIn;
  MOD_Wire<tUInt8> INST_master_read_rvalidIn;
  MOD_CReg<tUWide> INST_master_write_addrOut_rv;
  MOD_Wire<tUInt64> INST_master_write_awaddrOut;
  MOD_Wire<tUInt8> INST_master_write_awprotOut;
  MOD_Wire<tUInt8> INST_master_write_awreadyIn;
  MOD_Wire<tUInt8> INST_master_write_brespIn;
  MOD_Wire<tUInt8> INST_master_write_bvalidIn;
  MOD_CReg<tUWide> INST_master_write_dataOut_rv;
  MOD_Fifo<tUWide> INST_master_write_in;
  MOD_Reg<tUInt8> INST_master_write_isRst_isInReset;
  MOD_Fifo<tUInt8> INST_master_write_out;
  MOD_Wire<tUInt64> INST_master_write_wdataOut;
  MOD_Wire<tUInt8> INST_master_write_wreadyIn;
  MOD_Wire<tUInt8> INST_master_write_wstrbOut;
  MOD_Wire<tUInt64> INST_slave_read_araddrIn;
  MOD_Wire<tUInt8> INST_slave_read_arprotIn;
  MOD_Wire<tUInt8> INST_slave_read_arvalidIn;
  MOD_Fifo<tUWide> INST_slave_read_in;
  MOD_Reg<tUInt8> INST_slave_read_isRst_isInReset;
  MOD_Fifo<tUWide> INST_slave_read_out;
  MOD_Wire<tUInt64> INST_slave_read_rdataOut;
  MOD_Wire<tUInt8> INST_slave_read_rreadyIn;
  MOD_Wire<tUInt8> INST_slave_read_rrespOut;
  MOD_CReg<tUWide> INST_slave_write_addrIn_rv;
  MOD_Wire<tUInt64> INST_slave_write_awaddrIn;
  MOD_Wire<tUInt8> INST_slave_write_awprotIn;
  MOD_Wire<tUInt8> INST_slave_write_awvalidIn;
  MOD_Wire<tUInt8> INST_slave_write_breadyIn;
  MOD_Wire<tUInt8> INST_slave_write_brespOut;
  MOD_CReg<tUWide> INST_slave_write_dataIn_rv;
  MOD_Fifo<tUWide> INST_slave_write_in;
  MOD_Reg<tUInt8> INST_slave_write_isRst_isInReset;
  MOD_Fifo<tUInt8> INST_slave_write_out;
  MOD_Wire<tUInt64> INST_slave_write_wdataIn;
  MOD_Wire<tUInt8> INST_slave_write_wstrbIn;
  MOD_Wire<tUInt8> INST_slave_write_wvalidIn;
  MOD_Reg<tUInt64> INST_start;
  MOD_Reg<tUInt8> INST_start_write_request;
 
 /* Constructor */
 public:
  MOD_mkAXIConverter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_aresetn;
 
 /* Port definitions */
 public:
  tUInt8 PORT_S00_AXI_arready;
  tUInt8 PORT_S00_AXI_rvalid;
  tUInt64 PORT_S00_AXI_rdata;
  tUInt8 PORT_S00_AXI_rresp;
  tUInt8 PORT_S00_AXI_awready;
  tUInt8 PORT_S00_AXI_wready;
  tUInt8 PORT_S00_AXI_bvalid;
  tUInt8 PORT_S00_AXI_bresp;
  tUInt8 PORT_M00_AXI_arvalid;
  tUInt64 PORT_M00_AXI_araddr;
  tUInt8 PORT_M00_AXI_arprot;
  tUInt8 PORT_M00_AXI_rready;
  tUInt8 PORT_M00_AXI_awvalid;
  tUInt64 PORT_M00_AXI_awaddr;
  tUInt8 PORT_M00_AXI_awprot;
  tUInt8 PORT_M00_AXI_wvalid;
  tUInt64 PORT_M00_AXI_wdata;
  tUInt8 PORT_M00_AXI_wstrb;
  tUInt8 PORT_M00_AXI_bready;
  tUInt8 PORT_RDY_S00_AXI_arready;
  tUInt8 PORT_RDY_S00_AXI_parvalid;
  tUInt8 PORT_RDY_S00_AXI_paraddr;
  tUInt8 PORT_RDY_S00_AXI_parprot;
  tUInt8 PORT_RDY_S00_AXI_rvalid;
  tUInt8 PORT_RDY_S00_AXI_prready;
  tUInt8 PORT_RDY_S00_AXI_rdata;
  tUInt8 PORT_RDY_S00_AXI_rresp;
  tUInt8 PORT_RDY_S00_AXI_awready;
  tUInt8 PORT_RDY_S00_AXI_pawvalid;
  tUInt8 PORT_RDY_S00_AXI_pawaddr;
  tUInt8 PORT_RDY_S00_AXI_pawprot;
  tUInt8 PORT_RDY_S00_AXI_wready;
  tUInt8 PORT_RDY_S00_AXI_pwvalid;
  tUInt8 PORT_RDY_S00_AXI_pwdata;
  tUInt8 PORT_RDY_S00_AXI_pwstrb;
  tUInt8 PORT_RDY_S00_AXI_bvalid;
  tUInt8 PORT_RDY_S00_AXI_pbready;
  tUInt8 PORT_RDY_S00_AXI_bresp;
  tUInt8 PORT_RDY_M00_AXI_arvalid;
  tUInt8 PORT_RDY_M00_AXI_parready;
  tUInt8 PORT_RDY_M00_AXI_araddr;
  tUInt8 PORT_RDY_M00_AXI_arprot;
  tUInt8 PORT_RDY_M00_AXI_rready;
  tUInt8 PORT_RDY_M00_AXI_prvalid;
  tUInt8 PORT_RDY_M00_AXI_prdata;
  tUInt8 PORT_RDY_M00_AXI_prresp;
  tUInt8 PORT_RDY_M00_AXI_pawready;
  tUInt8 PORT_RDY_M00_AXI_awvalid;
  tUInt8 PORT_RDY_M00_AXI_awaddr;
  tUInt8 PORT_RDY_M00_AXI_awprot;
  tUInt8 PORT_RDY_M00_AXI_pwready;
  tUInt8 PORT_RDY_M00_AXI_wvalid;
  tUInt8 PORT_RDY_M00_AXI_wdata;
  tUInt8 PORT_RDY_M00_AXI_wstrb;
  tUInt8 PORT_RDY_M00_AXI_pbvalid;
  tUInt8 PORT_RDY_M00_AXI_bready;
  tUInt8 PORT_RDY_M00_AXI_pbresp;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_master_write_dataOut_rv_port1__read__05_BIT_72___d106;
  tUInt8 DEF_master_write_addrOut_rv_port1__read__7_BIT_67___d98;
  tUInt8 DEF_master_write_isRst_isInReset__h3396;
  tUInt8 DEF_master_read_isRst_isInReset__h2620;
  tUInt8 DEF_slave_write_isRst_isInReset__h871;
  tUInt8 DEF_slave_read_isRst_isInReset__h82;
  tUWide DEF_master_write_dataOut_rv_port1__read____d105;
  tUWide DEF_master_write_dataOut_rv_port0__read____d86;
  tUWide DEF_slave_write_dataIn_rv_port1__read____d24;
  tUWide DEF_slave_write_dataIn_rv_port0__read____d45;
  tUWide DEF_master_write_addrOut_rv_port1__read____d97;
  tUWide DEF_master_write_addrOut_rv_port0__read____d83;
  tUWide DEF_slave_write_addrIn_rv_port1__read____d22;
  tUWide DEF_slave_write_addrIn_rv_port0__read____d35;
  tUInt64 DEF_x__h6319;
  tUInt64 DEF_x__h6313;
  tUInt8 DEF_master_write_out_notFull____d115;
  tUInt8 DEF_master_read_out_notFull____d75;
  tUInt8 DEF_master_read_in_notEmpty____d66;
  tUInt8 DEF_slave_write_out_notEmpty____d57;
  tUInt8 DEF_slave_read_out_notEmpty____d15;
  tUInt8 DEF_slave_read_in_notFull____d6;
  tUInt8 DEF_NOT_master_write_isRst_isInReset_1___d99;
  tUInt8 DEF_NOT_master_read_isRst_isInReset_1___d63;
  tUInt8 DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_72_6___d47;
  tUInt8 DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_67_6___d37;
  tUInt8 DEF_NOT_slave_write_isRst_isInReset_1___d38;
  tUInt8 DEF_NOT_slave_read_isRst_isInReset___d3;
 
 /* Local definitions */
 private:
  tUWide DEF_master_write_in_first____d91;
  tUWide DEF_slave_write_in_first____d149;
  tUWide DEF_master_read_in_first____d69;
  tUWide DEF_slave_read_in_first____d122;
  tUWide DEF_master_read_out_first____d179;
  tUWide DEF_slave_read_out_first____d18;
  tUInt64 DEF_x__h6613;
  tUInt64 DEF_x__h6371;
  tUWide DEF_master_write_in_first__1_BITS_74_TO_3___d95;
  tUWide DEF_slave_write_dataIn_rv_port1__read__4_BITS_71_TO_0___d32;
  tUWide DEF_slave_write_addrIn_rv_port1__read__2_BITS_66_T_ETC___d34;
  tUWide DEF_address_image_2_34_PLUS_ddr_write_count_86_87__ETC___d189;
  tUWide DEF__1_CONCAT_master_write_in_first__1_BITS_74_TO_3_5___d96;
  tUWide DEF__1_CONCAT_slave_write_wdataIn_wget__1_CONCAT_sl_ETC___d53;
  tUWide DEF__0_CONCAT_DONTCARE___d30;
  tUWide DEF__1_CONCAT_slave_write_awaddrIn_wget__2_CONCAT_s_ETC___d44;
  tUWide DEF__1_CONCAT_master_write_in_first__1_BITS_138_TO__ETC___d94;
  tUWide DEF__0_CONCAT_DONTCARE___d29;
  tUWide DEF_slave_read_araddrIn_wget_CONCAT_slave_read_arp_ETC___d11;
  tUWide DEF_address_image_1_33_PLUS_ddr_read_count_68_69_C_ETC___d170;
  tUWide DEF_master_read_rdataIn_wget__8_CONCAT_master_read_ETC___d80;
  tUWide DEF_IF_slave_read_in_first__22_BITS_8_TO_3_23_EQ_0_ETC___d142;
 
 /* Rules */
 public:
  void RL_slave_read_isRst_isResetAssertedUpdate();
  void RL_slave_read_addrInWrite();
  void RL_slave_read_deqOut();
  void RL_slave_read_putOutData();
  void RL_slave_write_isRst_isResetAssertedUpdate();
  void RL_slave_write_mergeAddrData();
  void RL_slave_write_addrInWrite();
  void RL_slave_write_dataInWrite();
  void RL_slave_write_outWrite();
  void RL_slave_write_outForward();
  void RL_master_read_isRst_isResetAssertedUpdate();
  void RL_master_read_deqIn();
  void RL_master_read_forwardIn();
  void RL_master_read_enqOut();
  void RL_master_write_isRst_isResetAssertedUpdate();
  void RL_master_write_splitAddrData();
  void RL_master_write_deqAddr();
  void RL_master_write_forwardAddr();
  void RL_master_write_deqData();
  void RL_master_write_forwardData();
  void RL_master_write_forwardResp();
  void RL_handleReadRequest();
  void RL_handleWriteRequest();
  void RL_readRequest();
  void RL_convertRGB2Gray();
  void RL_writeRequest();
 
 /* Methods */
 public:
  tUInt8 METH_slave_read_fab_arready();
  tUInt8 METH_RDY_slave_read_fab_arready();
  void METH_slave_read_fab_parvalid(tUInt8 ARG_S00_AXI_arvalid);
  tUInt8 METH_RDY_slave_read_fab_parvalid();
  void METH_slave_read_fab_paraddr(tUInt64 ARG_S00_AXI_araddr);
  tUInt8 METH_RDY_slave_read_fab_paraddr();
  void METH_slave_read_fab_parprot(tUInt8 ARG_S00_AXI_arprot);
  tUInt8 METH_RDY_slave_read_fab_parprot();
  tUInt8 METH_slave_read_fab_rvalid();
  tUInt8 METH_RDY_slave_read_fab_rvalid();
  void METH_slave_read_fab_prready(tUInt8 ARG_S00_AXI_rready);
  tUInt8 METH_RDY_slave_read_fab_prready();
  tUInt64 METH_slave_read_fab_rdata();
  tUInt8 METH_RDY_slave_read_fab_rdata();
  tUInt8 METH_slave_read_fab_rresp();
  tUInt8 METH_RDY_slave_read_fab_rresp();
  tUInt8 METH_slave_write_fab_awready();
  tUInt8 METH_RDY_slave_write_fab_awready();
  void METH_slave_write_fab_pawvalid(tUInt8 ARG_S00_AXI_awvalid);
  tUInt8 METH_RDY_slave_write_fab_pawvalid();
  void METH_slave_write_fab_pawaddr(tUInt64 ARG_S00_AXI_awaddr);
  tUInt8 METH_RDY_slave_write_fab_pawaddr();
  void METH_slave_write_fab_pawprot(tUInt8 ARG_S00_AXI_awprot);
  tUInt8 METH_RDY_slave_write_fab_pawprot();
  tUInt8 METH_slave_write_fab_wready();
  tUInt8 METH_RDY_slave_write_fab_wready();
  void METH_slave_write_fab_pwvalid(tUInt8 ARG_S00_AXI_wvalid);
  tUInt8 METH_RDY_slave_write_fab_pwvalid();
  void METH_slave_write_fab_pwdata(tUInt64 ARG_S00_AXI_wdata);
  tUInt8 METH_RDY_slave_write_fab_pwdata();
  void METH_slave_write_fab_pwstrb(tUInt8 ARG_S00_AXI_wstrb);
  tUInt8 METH_RDY_slave_write_fab_pwstrb();
  tUInt8 METH_slave_write_fab_bvalid();
  tUInt8 METH_RDY_slave_write_fab_bvalid();
  void METH_slave_write_fab_pbready(tUInt8 ARG_S00_AXI_bready);
  tUInt8 METH_RDY_slave_write_fab_pbready();
  tUInt8 METH_slave_write_fab_bresp();
  tUInt8 METH_RDY_slave_write_fab_bresp();
  tUInt8 METH_master_read_fab_arvalid();
  tUInt8 METH_RDY_master_read_fab_arvalid();
  void METH_master_read_fab_parready(tUInt8 ARG_M00_AXI_arready);
  tUInt8 METH_RDY_master_read_fab_parready();
  tUInt64 METH_master_read_fab_araddr();
  tUInt8 METH_RDY_master_read_fab_araddr();
  tUInt8 METH_master_read_fab_arprot();
  tUInt8 METH_RDY_master_read_fab_arprot();
  tUInt8 METH_master_read_fab_rready();
  tUInt8 METH_RDY_master_read_fab_rready();
  void METH_master_read_fab_prvalid(tUInt8 ARG_M00_AXI_rvalid);
  tUInt8 METH_RDY_master_read_fab_prvalid();
  void METH_master_read_fab_prdata(tUInt64 ARG_M00_AXI_rdata);
  tUInt8 METH_RDY_master_read_fab_prdata();
  void METH_master_read_fab_prresp(tUInt8 ARG_M00_AXI_rresp);
  tUInt8 METH_RDY_master_read_fab_prresp();
  void METH_master_write_fab_pawready(tUInt8 ARG_M00_AXI_awready);
  tUInt8 METH_RDY_master_write_fab_pawready();
  tUInt8 METH_master_write_fab_awvalid();
  tUInt8 METH_RDY_master_write_fab_awvalid();
  tUInt64 METH_master_write_fab_awaddr();
  tUInt8 METH_RDY_master_write_fab_awaddr();
  tUInt8 METH_master_write_fab_awprot();
  tUInt8 METH_RDY_master_write_fab_awprot();
  void METH_master_write_fab_pwready(tUInt8 ARG_M00_AXI_wready);
  tUInt8 METH_RDY_master_write_fab_pwready();
  tUInt8 METH_master_write_fab_wvalid();
  tUInt8 METH_RDY_master_write_fab_wvalid();
  tUInt64 METH_master_write_fab_wdata();
  tUInt8 METH_RDY_master_write_fab_wdata();
  tUInt8 METH_master_write_fab_wstrb();
  tUInt8 METH_RDY_master_write_fab_wstrb();
  void METH_master_write_fab_pbvalid(tUInt8 ARG_M00_AXI_bvalid);
  tUInt8 METH_RDY_master_write_fab_pbvalid();
  tUInt8 METH_master_write_fab_bready();
  tUInt8 METH_RDY_master_write_fab_bready();
  void METH_master_write_fab_pbresp(tUInt8 ARG_M00_AXI_bresp);
  tUInt8 METH_RDY_master_write_fab_pbresp();
 
 /* Reset routines */
 public:
  void reset_aresetn(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAXIConverter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkAXIConverter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkAXIConverter &backing);
};

#endif /* ifndef __mkAXIConverter_h__ */
